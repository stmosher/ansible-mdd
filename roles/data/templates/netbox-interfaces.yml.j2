#jinja2: lstrip_blocks: True
{% set vrf_interfaces = dict() %}
{% if interfaces %}
{#                                                                            #}
{# Create a dictionary of interface parents as keys each with a list of       #}
{# subinterfaces.                                                             #}
{#                                                                            #}
{% set interface_dict = dict() %}
{% for interface in interfaces %}
   {% set interface_parent, interface_index = interface.name | regex_search('^(?P<name>[^.]+)(\.)?(?P<index>[^.]+)?$', '\\g<name>', '\\g<index>') %}
   {% set _ = interface.update({'parent': interface_parent}) %}
   {% if interface_dict[interface_parent] is not defined %}
      {% set _ = interface_dict.update({interface_parent: []}) %}
   {% endif %}
   {% set temp_list = interface_dict[interface_parent] %}
   {% if not interface_index %}
      {% set _ = interface.update({'index': '0'}) %}
      {% set temp_list = [interface] + temp_list %}
   {% else %}
      {% set _ = interface.update({'index': interface_index}) %}
      {% set temp_list = temp_list + [interface]  %}
   {% endif %}
   {% set _ = interface_dict.update({interface_parent: temp_list}) %}
{% endfor %}
openconfig-interfaces:interfaces:
   interface:
{% for interface_parent, subinterface_list in interface_dict.items() %}
   {% set interface = subinterface_list[0] %}
   {% set dhcp_enabled = [] %}
   -  name: {{ interface_parent }}
      config:
   {% if interface.description %}
         description: "{{ interface.description }}"
   {% endif %}
         enabled: true
         name: {{ interface_parent }}
   {% if interface.mtu is defined and interface.mtu %} 
         mtu: {{ interface.mtu }}
   {% endif %}{# if interface.mtu is defined and interface.mtu #}
   {% if interface.type.value == 'virtual' and interface.untagged_vlan is defined and interface.untagged_vlan %}
   {% set interface_type = 'l3ipvlan' %}
   {% else %}
   {% set interface_type = {"virtual": "softwareLoopback", "lag": "ieee8023adLag"}[interface.type.value] | default('ethernetCsmacd') %}
   {% endif %}
         type: {{ interface_type }}
         enabled: {{ 'true' if interface.enabled | bool else 'false' }}
   {% if interface_type == 'ethernetCsmacd' %}
      openconfig-if-ethernet:ethernet:
         config: {}
      {% if interface.mode is defined and interface.mode %}
         openconfig-vlan:switched-vlan:
            config:
         {% if interface.mode.value == "access" %}                     
               'access-vlan': {{ interface.untagged_vlan.id }}
               'interface-mode': ACCESS
         {% elif interface.mode.value == "tagged" %}
               'interface-mode': TRUNK
               'native-vlan': {{ interface.untagged_vlan.id }}
            {% set tagged_vlans = [] %}
            {% for vlan in interface.tagged_vlans %}
               {% set _ = tagged_vlans.append(vlan.id) %}
            {% endfor %}{# for vlan in interface.tagged_vlans #}
               'trunk-vlans': [ {{ tagged_vlans|join(',') }} ]
         {% endif %}{# if interface.mode.value #}
      {% endif %}{# if interface.mode #}
   {% endif %}{# if interface_type #}
   {% if interface_type == 'l3ipvlan' %}
      openconfig-vlan:routed-vlan:
         config:
            vlan: "{{ interface.untagged_vlan.vid }}"
      {% if interface.ip_addresses is defined and interface.ip_addresses %}
         openconfig-if-ip:ipv4:
         {% if interface.ip_addresses[0].status.value != 'dhcp' %}
            addresses:
               address:
            {% for address_item in interface.ip_addresses | default([]) %}
               {% if address_item.vrf %}
                  {% if vrf_interfaces[address_item.vrf.name] is not defined %}
                     {% set _ = vrf_interfaces.update({address_item.vrf.name: []}) %}
                  {% endif %}
                     {% set temp_list = vrf_interfaces[address_item.vrf.name] %}
                     {% set _ = temp_list.append(subinterface) %}
                     {% set _ = vrf_interfaces.update({address_item.vrf.name: temp_list}) %}
               {% endif %}
                  -  ip: {{ address_item.address.split('/')[0] }}
                     config:
                        ip: {{ address_item.address.split('/')[0] }}
                        prefix-length: {{ address_item.address.split('/')[1] }}
            {% endfor %}{# for address_item in interface.ip_addresses #}
            config:
               'dhcp-client': false
         {% else %}
            config:
               'dhcp-client': true
         {% endif %}                    
      {% endif %}{# if interface.ip_addresses is defined and interface.ip_addresses #}
   {% else %}
      subinterfaces:
         subinterface:
         {% for subinterface in subinterface_list %}
         -  index: '{{ subinterface.index }}'
            config:
               index: '{{ subinterface.index }}'
               enabled: {{ 'true' if subinterface.enabled | bool else 'false' }}
            {% if subinterface.mode and subinterface.mode.value == 'access' %}
            openconfig-vlan:vlan:
               config:
                  vlan-id: '{{ subinterface.untagged_vlan.vid }}'
            {% endif %}
            {% if subinterface.ip_addresses is defined and subinterface.ip_addresses %}
            openconfig-if-ip:ipv4:
            {% if subinterface.ip_addresses[0].status.value != 'dhcp' %}
               addresses:
                  address:
               {% for address_item in subinterface.ip_addresses | default([]) %}
                  {% if address_item.vrf %}
                     {% if vrf_interfaces[address_item.vrf.name] is not defined %}
                        {% set _ = vrf_interfaces.update({address_item.vrf.name: []}) %}
                     {% endif %}
                     {% set temp_list = vrf_interfaces[address_item.vrf.name] %}
                     {% set _ = temp_list.append(subinterface) %}
                     {% set _ = vrf_interfaces.update({address_item.vrf.name: temp_list}) %}
                  {% endif %}
                  -  ip: {{ address_item.address.split('/')[0] }}
                     config:
                        ip: {{ address_item.address.split('/')[0] }}
                        prefix-length: {{ address_item.address.split('/')[1] }}
               {% endfor %}{# for address_item in interface.ip_addresses #}
               config:
                  'dhcp-client': false
            {% else %}
               config:
                  'dhcp-client': true
            {% endif %}                    
            {% endif %}{# if interface.ip_addresses is defined and interface.ip_addresses #}
         {% endfor %}
   {% endif %}
{% endfor %}{# for interface in interfaces #}
{% if vrf_interfaces.items() | length %}
openconfig-network-instance:network-instances:
   network-instance:
{% for key, interfaces in vrf_interfaces.items() %}
   -  name: {{ key }}
      config:
         name: {{ key }}
         type: 'L3VRF'
         enabled: true
         enabled-address-families:
         -  'IPV4'
      interfaces:
         interface:
   {% for interface in interfaces %}
         -  id: {{ interface.name }}
            config:
               id: {{ interface.name }}
               interface: {{ interface.parent }}
               subinterface: {{ interface.index }}
   {% endfor %}
{% endfor %}
{% endif %}
{% endif %}